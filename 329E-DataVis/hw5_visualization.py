# -*- coding: utf-8 -*-
"""hw5_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHKiihfYT7nmLIWTxaOl90pYB4-bVQiy

# CS 329 E Data Visualization Homework 5

## National Parks and Biodiversity 

### Submitted by : Maxwell Kretschmer 11am

In our last homework, we'll combine some of the concepts from the 
recent lab (geo data) with merging data and create an interactive 
dashboard.
"""

!pip install geopandas

# importing packages

# data wrangling
import pandas as pd
import numpy as np

# plotting
import altair as alt

# working with geographic data
import json
import geopandas as gpd
from vega_datasets import data

"""## Loading in a shape file
This zip file contains a _shape_ file.  This is one of the types of geometry data supported by geopandas ([doc](https://geopandas.org/en/stable/docs/user_guide/io.html?highlight=shape%20files#reading-spatial-data))
"""

# importing shapefile - We can use a zip file that contains a shape file by reading it from a URL
gdf = gpd.read_file('http://cs.utexas.edu/~chaney/nps_boundary.zip')

gdf.sample(5)

"""## Q1 - Overlay the National Parks and Monuments on a county map of the USA
Using the geopandas data frame `gdf`, filter out just the national parks and monuments and overlay
them on a county map of the USA.  Use the Vega data set to map the counties, using [this page](https://altair-viz.github.io/gallery/choropleth.html) as a reference.  Create a tool tip that shows the park name (`UNIT_NAME`) and region (`REGION`) of the park, title your chart, and encode the color with the Region of the park using the `dark2` colorscheme. See [this page](https://altair-viz.github.io/user_guide/customization.html#customizing-colors) for a reference on changing the color scheme. 

This would be an appropriate visualization if our user wanted to understand the landsize of the parks and how the regions were labeled. 
"""

# your code here
counties = alt.topo_feature(data.us_10m.url, 'counties')
natPM = gdf[gdf['UNIT_TYPE'].isin(['National Park', 'National Monument'])]
natPMR = natPM[natPM['REGION'].isin(['IM','PW'])]

countiesM = alt.Chart(counties).mark_geoshape().encode(
    color=alt.value('grey')
).project(
    type='albersUsa'
).properties(
    width=750, #1000
    height=500 #700
)
nationalPM = alt.Chart(natPMR).mark_geoshape().encode(
    color=alt.Color('REGION', scale=alt.Scale(scheme='dark2')),
    tooltip=['UNIT_NAME','REGION']
).project(
    type='albersUsa'
).properties(
    width=750,
    height=500
)
countiesM + nationalPM

"""## Loading in a csv a species data"""

df_species = pd.read_csv('http://cs.utexas.edu/~chaney/numspecies.csv')
df_species = df_species.fillna( value = 0 ) # Fill the missing species counts with zeros for visualization
df_species.sample(5)

"""## Q2 - Change data to Long format 
Remember [long form vs wide form formats](https://altair-viz.github.io/user_guide/data.html#long-form-vs-wide-form-data)? It turns out our species data is wide form.  Convert it to long form and save the new dataframe to `df_species_long`. Name your new columns `Species Type` and `Species Count` so they look pretty when we plot them later.
"""

# your code here
df_species_long = df_species.melt('UNIT_CODE', var_name='Species Type', value_name='Species Count')

# sniff check
df_species_long.sample(5)

"""## Q3 - Get lat/long and area from park shape
We have the shape file for the national parks, which contains the polygon for the park boundary, but we decide for the visualization we want to encode the location with a circle whose size is constant.  We also are interested in comparing the area of the park with the species diversity to discover trends. To accomplish these tasks we need to calculate the centroid of the park to get a single lat/long and calculate the area of the polygon in acres (a convenient unit for the USA). 

To do math in geopandas you have to translate between "EPSG:4269" and "EPSG:5070" (USA Albers projection)

Add the `Acres` column to the `gdf` geopandas dataframe, and replace the `geometry` column with the centroid. Use the [intro to geopandas](https://geopandas.org/en/stable/getting_started/introduction.html) documentation to help with the syntax.

Check that everything looks OK by plotting the lat/long of the parks on top of the county map as before. Include a tooltip that shows the region, name of park, and Acres. Use the `dark2` color scheme.

I'm helping you out with the coordinate reference systems here; note that there are many many map reference coordinates and we can see the reference for a given geopandas dataframe with the `crs` property. 
"""

gdf = gdf.to_crs( 'EPSG:5070')

# look at the coordinate reference of the data - this needs to be translated to do math, but then put back
gdf.crs

# Find the area in acres
gdf['Acres'] = gdf.area / 4046.8564224 # your code here to calculate acrage

# sniff check
# The value from Rocky Mountain National Park webpage is 265,807 acres and our estimate is off probably due to the 
# projection we used was not locally optimal, or maybe the shape file wasn't exact. If we were a GIS class
# this would probably bother us, but for now we'll call this close enough (your number should be about 0.5% off)
gdf[gdf['UNIT_CODE'] == 'ROMO']['Acres']
# (267041.649602 - 265807) / 265807 = 0.00464491003 * 100 = 0.464491004%

gdf['geometry'] = gdf.centroid # your code here to convert the polygons data to point data

gdf = gdf.to_crs( 'EPSG:4269') # This takes us back to lat/long space
gdf.sample(5)

# your map code here
natPM = gdf[gdf['UNIT_TYPE'].isin(['National Monument', 'National Park'])]

counties = alt.topo_feature(data.us_10m.url, 'counties')
countiesM = alt.Chart(counties).mark_geoshape().encode(
    color=alt.value('#999999')
).project(
    type='albersUsa'
).properties(
    width=1000,
    height=600
)
nationalPM = alt.Chart(natPM).mark_geoshape().encode(
    color=alt.Color('REGION', scale=alt.Scale(scheme='dark2')),
    tooltip=['UNIT_NAME','REGION']
).project(
    type='albersUsa'
).properties(
    width=1000,
    height=600
)
countiesMap = countiesM + nationalPM
countiesMap

"""## Q4 - Merge Geo Data and and Species Data
We've been using the `UNIT_NAME` for the park name in the plots, and we want to use that same name, and the acerage
when plotting the species data.  Add these two columns to our `df_species_long` dataframe using a inner join, renaming the `UNIT_NAME` to `Park Name`, and `REGION` to `Region` for pretty 
visualization. The key for the merge is `UNIT_CODE`. Save this new dataframe as `df_species_final`
"""

natPM.head(5)

mergeGDF = gdf[['UNIT_CODE','UNIT_NAME', 'Acres','REGION']]
df_species_final = pd.merge(df_species_long, mergeGDF, on="UNIT_CODE")
  
df_species_final.rename(columns = {'UNIT_NAME':'Park Name', 
'REGION':'Region'}, inplace = True)

df_species_final

"""## Q5 - Compare the Acres to Species Count

On a log/log scale compare the total species count (only the rows where "Species Type" is "All Types") with the park size. Encode the region using the same color scale as above. Add a tool tip to see the park name, Species Count, and Acres.

Add a `selection_multi` that will highlight the selected data by turning unselected data light gray.
"""

# your code here
selector = alt.selection_multi(bind='legend',fields=['UNIT_CODE','Park Name'])
speciesCt = df_species_final[df_species_final['Species Type'] == 'All Types']
alt.Chart(speciesCt).mark_circle(size=75).encode(
    x=alt.X("Acres",scale=alt.Scale(type="log")),
    y=alt.Y("Species Count",scale=alt.Scale(type="log")),
    color=alt.condition(selector, 'Region:N', alt.value('lightgray'), scale=alt.Scale(scheme='dark2')),
    tooltip=['Park Name', 'Species Count', 'Acres']
).properties(
    width=400,
    height=300,
    title="Park Size vs Species Count (log/log scale)"
).add_selection(
    selector
)

"""## Q6 - Create a rug plot of Species Diversity
Look at how the different Species categores (all Species types that are NOT 'All Types' are distributed
across all the parks.  

Use the same color encoding for the Region as the prior plots. 

Add a `selection_multi` that will highlight the selected data for a park by turning unselected data light gray. 
Also, make the tick a little bigger when it is selected to help find the park in the other categories.
"""

# your code here
speciesTypes = df_species_final[df_species_final['Species Type'] != 'All Types']

selector = alt.selection_multi(bind='legend',fields=['UNIT_CODE','Park Name'])

alt.Chart(speciesTypes).mark_tick(thickness=2).encode(
    x=alt.X("Species Count",scale=alt.Scale(type="sqrt")),
    y=alt.Y("Species Type", title=""),
    color=alt.condition(selector, 'Region:N', alt.value('lightgray'), scale=alt.Scale(scheme='dark2')),
    size=alt.condition(selector, alt.value(20), alt.value(15)),
    tooltip=['Park Name', 'Species Count', 'Species Type', 'Region']
).properties(
    width=400,
    height=300,
    title="Species Count by Type"
).add_selection(
    selector
)

"""## Q7 - Create a sorted bar chart of Species Count with a Region Drop down selector

Create a bar chart with horizontal bars that shows the total species count per park with the color channel encoding the Region.

Add a drop down selector so that you can filter the bar chart by just one region. See [this documentation](https://altair-viz.github.io/gallery/multiple_interactions.html) for an example of adding a drop down menu and using it to filter your selections.

In addition to the drop down, include a `selection_multi` that will highlight the selected data by turning unselected data light gray.
"""

# your code here
regions = list(speciesCt['Region'].unique())

speciesCt = df_species_final[df_species_final['Species Type'] == 'All Types']

selector = alt.selection_multi(name="Park Selector", bind='legend',fields=['UNIT_CODE','Park Name'])

dropdown = alt.binding_select(options=[None]+regions, labels=["All"]+regions, name="Filter by a Region:  ")
dropdown_select = alt.selection_single(fields=['Region'], bind=dropdown)

alt.Chart(speciesCt).mark_bar().encode(
    x=alt.X("Species Count",scale=alt.Scale(type="sqrt")),
    y=alt.Y("Park Name", sort='-x', title=""),
    color=alt.condition(selector, 'Region:N', alt.value('lightgray'), scale=alt.Scale(domain=["NE", "IM", "MW", "SE", "PW", "AK"], scheme='dark2') ),
    tooltip=['Park Name', 'Species Count', 'Species Type']
).properties(
    width=300,
    title="Parks Sorted by Species Count"
).add_selection(
    dropdown_select
).transform_filter(
    dropdown_select
).add_selection(
    selector
)

"""## Q8 - Bring all the charts together for a Dashboard

Bring all 4 charts and the region filter together.  Any click on one chart should highlight that data in the
other charts.  The colors for the regions should not change depending on the region selection and be consistent across 
all graphs. When plotting your geopandas data frame, filter out only the rows that have species data before making the map. I used the [documentation on customizing titles](https://altair-viz.github.io/user_guide/configuration.html#config-title) to change the font size and name my dashboard (all of the titles in the component graphs I changed to be `subtitles`)

Change your color scheme to `tableau10`.

Hint: There will be only one `selection_multi` that links all the selection highlighting in the charts together.
"""

# VARS
speciesCt = df_species_final[df_species_final['Species Type'] == 'All Types']
speciesTypes = df_species_final[df_species_final['Species Type'] != 'All Types']

regions = list(speciesCt['Region'].unique())

dropdown = alt.binding_select(options=[None]+regions, labels=["All"]+regions, name="Filter by a Region:  ")
dropdown_select = alt.selection_single(fields=['Region'], bind=dropdown)

selector = alt.selection_multi(name="Park Selector", bind='legend',fields=['UNIT_CODE','Park Name'])

gdf.rename(columns = {'UNIT_NAME':'Park Name', 'REGION':'Region'}, inplace = True)

natParks = gdf[gdf['Park Name'].isin(list(speciesCt['Park Name'].unique()))]

counties = alt.topo_feature(data.us_10m.url, 'counties')

regionScale = alt.Scale(domain=["NE", "IM", "MW", "SE", "PW", "AK"], scheme='tableau10')

# GEOSHAPE
countiesM = alt.Chart(counties).mark_geoshape().encode(
    color=alt.value('#999999')
).project(
    type='albersUsa'
).properties(
    width=850,
    height=600,
    title={
      "text": [""], 
      "subtitle": ["National Parks in the USA"],
    }
)
nationalPM = alt.Chart(natParks).mark_geoshape().encode(
    color=alt.condition(selector, 'Region:N', alt.value('lightgray'), scale=regionScale),
    tooltip=['Park Name','Region','Acres'] # acres format='d'
).project(
    type='albersUsa'
).add_selection(
    selector
).transform_filter(
    dropdown_select
)
countiesMap = countiesM + nationalPM

# ACRES
acreMap = alt.Chart(speciesCt).mark_circle(size=75).encode(
    x=alt.X("Acres",scale=alt.Scale(type="log")),
    y=alt.Y("Species Count",scale=alt.Scale(type="log")),
    color=alt.condition(selector, 'Region:N', alt.value('lightgray'), scale=regionScale),
    tooltip=['Park Name', 'Species Count', 'Acres'] # acres format='d'
).properties(
    width=380,
    title={
      "text": [""], 
      "subtitle": ["Park Size vs Species Count (log/log scale)"],
    }
).add_selection(
    selector
)

# RUG PLOT
speciesTypeMap = alt.Chart(speciesTypes).mark_tick(thickness=2).encode(
    x=alt.X("Species Count",scale=alt.Scale(type="sqrt")),
    y=alt.Y("Species Type", title=""),
    color=alt.condition(selector, 'Region:N', alt.value('lightgray'), scale=regionScale),
    size=alt.condition(selector, alt.value(20), alt.value(15)),
    tooltip=['Park Name', 'Species Count', 'Species Type', 'Region']
).properties(
    width=380,
    title={
      "text": [""], 
      "subtitle": ["Species Count by Type"],
    }
).add_selection(
    selector
)

# BAR CHART
speciesCountMap = alt.Chart(speciesCt).mark_bar().encode(
    x=alt.X("Species Count",scale=alt.Scale(type="sqrt")),
    y=alt.Y("Park Name", sort='-x', title=""),
    color=alt.condition(selector, 'Region:N', alt.value('lightgray'), scale=regionScale ),
    tooltip=['Park Name', 'Species Count', 'Species Type']
).properties(
    width=300,
    title={
      "text": [""], 
      "subtitle": ["Parks Sorted by Species Count"],
    }
).add_selection(
    dropdown_select
).transform_filter(
    dropdown_select
).add_selection(
    selector
)

result = speciesCountMap | (countiesMap & (speciesTypeMap | acreMap))

resultGraph = result.properties(
    title="National Park Diversity Dashboard"
).configure_title(
    fontSize=20,
    subtitleFontSize=16
)
resultGraph