# -*- coding: utf-8 -*-
"""interactive-juxtapose-lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oidDS6prXIlJ9VuORcjrr5D0TUF0W6-w

# Altair: Interactive Juxtapose Lab

## Group: 49

### Members: Max Kretschmer

# Compound Charts

Altair provides a concise API for creating multi-panel and layered charts, and we'll mention three of them explicitly here:

- Layering
- Horizontal Concatenation
- Vertical Concatenation
- Repeat Charts

We'll explore those briefly here.
"""

import altair as alt

"""## Layering

Layering lets you put layer multiple marks on a single Chart. One common example is creating a plot with both points and lines representing the same data.

Let's use the ``stocks`` data for this example:
"""

from vega_datasets import data
stocks = data.stocks()
stocks.head()

"""Here is a simple line plot for the stocks data:"""

alt.Chart(stocks).mark_line().encode(
    x='date:T',
    y='price:Q',
    color='symbol:N'
)

"""and here is the same plot with a ``circle`` mark:"""

alt.Chart(stocks).mark_circle().encode(
    x='date:T',
    y='price:Q',
    color='symbol:N'
)

"""We can layer these two plots together using a ``+`` operator:"""

lines = alt.Chart(stocks).mark_line().encode(
    x='date:T',
    y='price:Q',
    color='symbol:N'
)

points = alt.Chart(stocks).mark_circle().encode(
    x='date:T',
    y='price:Q',
    color='symbol:N'
)

lines + points

"""This ``+`` is just a shortcut to the ``alt.layer()`` function, which does the same thing:"""

alt.layer(lines, points)

"""One pattern we'll use often is to create a base chart with the common elements, and add together two copies with just a single change:"""

base = alt.Chart(stocks).encode(
    x='date:T',
    y='price:Q',
    color='symbol:N'
)

base.mark_line() + base.mark_circle()

"""## Horizontal Concatenation

Just as we can layer charts on top of each other, we can concatenate horizontally using ``alt.hconcat``, or equivalently the ``|`` operator:
"""

base.mark_line() | base.mark_circle()

alt.hconcat(base.mark_line(),
            base.mark_circle())

"""This can be most useful for creating multi-panel views; for example, here is the iris dataset:"""

iris = data.iris()
iris.head()

base = alt.Chart(iris).mark_point().encode(
    x='petalWidth',
    y='petalLength',
    color='species'
)

base | base.encode(x='sepalWidth')

"""## Vertical Concatenation

Vertical concatenation looks a lot like horizontal concatenation, but using either the ``alt.hconcat()`` function, or the ``&`` operator:
"""

base & base.encode(y='sepalWidth')

"""## Repeat Chart - Small Multiples (SPLOM)

Because it is such a common pattern to horizontally and vertically concatenate charts while changing one encoding, Altair offers a shortcut for this, using the ``repeat()`` operator.
"""

import altair as alt
from vega_datasets import data

iris = data.iris()

fields = ['petalLength', 'petalWidth', 'sepalLength', 'sepalWidth']

alt.Chart(iris).mark_point().encode(
    alt.X(alt.repeat("column"), type='quantitative'),
    alt.Y(alt.repeat("row"), type='quantitative'),
    color='species'
).properties(
    width=200,
    height=200
).repeat(
    row=fields,
    column=fields[::-1]
).interactive()

"""## Small Multiples - US Population: Wrapped Facet

This chart visualizes the age distribution of the US population over time, using a wrapped faceting of the data by decade.
"""

population = data.population()

alt.Chart(population).mark_area().encode(
    x='age:O',
    y=alt.Y(
        'sum(people):Q',
        title='Population',
        axis=alt.Axis(format='~s')
    ),
    facet=alt.Facet('year:O', columns=5),
).properties(
    title='US Age Distribution By Year',
    width=90,
    height=80
)

"""### Your Turn!

  1. Create horizontally juxtaposed bar charts using the population data.  The left bar chart should show the age and number of people in 1950 that are women (`sex` == 1) as a function of age, and the right bar chart should show the number of people in 1950 that are men (`sex` == 2) as a function of age. Make the left bar chart be the color '#F4D03F' and the right bar chart to be the color '#7D3C98'.  Filter the data using the slicing techniques in pandas.
  2. Create a layered line graph that shows the number of women in 1950 as a function of age and the number of men in 1950 as a function of age. Use the same colors as the first problem.  It's ok for now if you don't have a legend (legends in layered altair charts are complicated).  Again, use the pandas slicing to filter the data prior to creating the chart. 
"""

# your code here
fifties = population[population['year'] == 1950]

men = alt.Chart(fifties[fifties['sex'] == 2]).mark_bar().encode(
    x='age:O',
    y='people',
    color=alt.value('#7D3C98')
)
women = alt.Chart(fifties[fifties['sex'] == 1]).mark_bar().encode(
    x='age:O',
    y='people',
    color=alt.value('#F4D03F')
)

women | men

# your code here
men = alt.Chart(fifties[fifties['sex'] == 2]).mark_line().encode(
    x='age:O',
    y='people',
    color=alt.value('#7D3C98')
)
women = alt.Chart(fifties[fifties['sex'] == 1]).mark_line().encode(
    x='age:O',
    y='people',
    color=alt.value('#F4D03F')
)

women + men