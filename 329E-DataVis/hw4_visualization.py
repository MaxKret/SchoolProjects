# -*- coding: utf-8 -*-
"""hw4_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hUsGGt3x1azNjwY8-pbK9ZZvPI9wE5pQ

# Baby Boomers Thru Time
## Demographics Report by Max Kretschmer - mtk739
Modify this cell by placing your name and eid in the space above.

## Homework 4

### Creating Interactive Charts to Visualize Population Shifts over Time with Altair

Baby boomers (often shortened to boomers) are the demographic cohort following the Silent Generation and preceding Generation X. The generation is generally defined as people born from 1946 to 1964, during the postâ€“World War II baby boom. The term is also used outside the United States but the dates, the demographic context and the cultural identifiers may vary. The baby boom has been described variously as a "shockwave"and as "the pig in the python." Baby boomers are often parents of late Gen Xers and Millennials. [from wikipedia](https://en.wikipedia.org/wiki/Baby_boomers).

Let's explore this "shockwave" by examining the US Census data available via the vega datasets package.  We'll start by doing some data engineering to add a column in our population data to denote generational membership, then we'll juxtapose the sex distribution of the population using a brush and linking technique we studied in the lab.  Finally we'll add a slider to animate the transition through time.
"""

# Import the necessary libraries and data
import altair as alt
import pandas as pd
from vega_datasets import data
import numpy as np

df_population = data.population()

df_population.head()

"""## Q1 - Add in the "Boomer" label

As we can see from inspecting the dataframe, our data only gives us information for: 
  - year
  - age
  - sex
  - people
  
But, we want to be able to highlight just the people born between 1946 - 1964 as a separate group.  To accomplish this, we want to create a new categorical attribute - `Generation`

Using pandas data manipulation techniques, add a new column to `df_population` named `Generation` that either has the value `Baby Boomer` or `Other`. 
"""

# your code here
agediff = df_population['year']-df_population['age']
df_population['Generation'] = ['Baby Boomer' if (x>=1946 and x<=1964) else 'Other' for x in [c for (i,c) in agediff.items()]]

"""## Q2 - Change the encoding for `sex`

As in our lab in class, the sex is "Male" is encoded as the number `1` and the sex for Female is encoded as `2`.  Modify the dataframe  `df_population` to replace the encoding with the string so when we create our plots this will automatically have the legend come out correctly (note, you can map numbers to labels in Altair as well).  
"""

# your code here
df_population['sex'] = ['Male' if (x==1) else 'Female' for x in df_population['sex']]

df_population.head()

"""## Q3 Juxtapose Bar Charts Horizontally 

Create a bar chart of the population distribution in the year 1960, and horizontally juxtapose the bar chart of the population distribution for the year 1990. Plot the total number of people (ignoring the `sex` attribute).

Note - You can slice the data to a give year before you pass it to Altair using pandas. (you can also do this in Altair with filters, but we haven't covered that yet).

Encode membership of the Baby Boomer generation with color using "#7D3C98" (purple) for the boomers "#F4D03F" (gold) for other.

Fix the y axis so it is equal in both plots.
"""

# your code here
boomer_scale = alt.Scale(
                    domain=['Baby Boomer', 'Other'],
                    range=['#7D3C98', '#F4D03F'])

sixties = alt.Chart(df_population[df_population['year'] == 1960]).mark_bar().encode(
    x=alt.X('age:O', title="Age"),
    y=alt.Y('people:Q', title="Number of People", scale=alt.Scale(domain=[0, 23000000])),
    color=alt.Color('Generation:N',
                    scale=boomer_scale )
).properties(
    title="Distribution of Ages in 1960"
)

nineties = alt.Chart(df_population[df_population['year'] == 1990]).mark_bar().encode(
    x=alt.X('age:O', title="Age"),
    y=alt.Y('people:Q', title="Number of People", scale=alt.Scale(domain=[0, 23000000])),
    color=alt.Color('Generation:N')
).properties(
    title="Distribution of Ages in 1990"
)

sixties | nineties

"""## Q5 - Show the Population Change Over Time with a Slider

Now, we have a snapshot of 2 different years next to each other, but what about creating a crude animation by controlling the the year displayed with a slider?

Create a slider using [this example](https://altair-viz.github.io/gallery/us_population_over_time.html) to help guide you.  Our plot will look similar, except we have not split our bar chart up by `sex` yet. Name the slider 'Select Year:' (this in controlled in `binding_range`, and not in the `selection_single` parameters).  

Encode membership of the Baby Boomer generation with color using "#7D3C98" (purple) for the boomers "#F4D03F" (gold) for other.

Start the slider at 1900.
"""

# your code here
boomer_scale = alt.Scale(domain=['Baby Boomer', 'Other'],
                         range=['#7D3C98', '#F4D03F'])
slider = alt.binding_range(min=1900, max=2000, step=10, name='Select Year:')
select_year = alt.selection_single(name="year", fields=['year'],
                                   bind=slider, init={'year': 1900})

alt.Chart(df_population).mark_bar().encode(
    x=alt.X('age:O', title="Age"),
    y=alt.Y('people:Q', title="Number of People", scale=alt.Scale(domain=[0, 23000000])),
    color=alt.Color('Generation:N', scale=boomer_scale )
).properties(
    width=700,
    title="Population Distribution by Age in the USA"
).add_selection(
    select_year
).transform_filter(
    select_year
)

"""## Q6 - Linking

Let's take a closer look at just the year 2000 data, and find what the distribution of sex is for each individual age grouping.  Plot the distribution of ages as a bar chart for just the year 2000, and link a histogram that will plot the distribution of sex for the current selection.  It should default to no age group selected.  The histogram for the sex distribution should appear below the year 2000 data (vertically concatenated). When a bar on the top chart is selected, indicate its selection by turning the other bars light gray.  The histogram of the sex distribution below it should be a horizontal bar chart. 

Encode membership of the Baby Boomer generation with color using "#7D3C98" (purple) for the boomers "#F4D03F" (gold) for other.
"""

# your code here
boomer_scale = alt.Scale(domain=['Baby Boomer', 'Other'],
                         range=['#7D3C98', '#F4D03F'])

select_age = alt.selection_single(name='age', fields=['age'])

oughts = alt.Chart(df_population[df_population['year'] == 2000]).mark_bar().encode(
    x=alt.X('age:O', title="Age"),
    y=alt.Y('people:Q', title="Number of People", scale=alt.Scale(domain=[0, 23000000])),
    color=alt.condition(select_age, 'Generation:N', alt.value('lightgray'), scale=boomer_scale)
).properties(
    title="Distribution of Ages in 2000",
    width=700
).add_selection(
    select_age
)

hist = alt.Chart(df_population[df_population['year'] == 2000]).mark_bar().encode(
    x=alt.X('people:Q', title="Number of People"),
    y=alt.Y('sex:N', title="Sex"),
    color=alt.Color('Generation:N', scale=boomer_scale )
).properties(
    title="Distribution of Sex for Above Age Selection",
    width=700
).transform_filter(
    select_age
)

oughts & hist

"""## Q7 - Combine Q5 and Q6 to One Chart

In question 6, we linked the distribution of sex to the age selection for just the year 2000.  Let's visualize all the data by incorporating the year selection slider from question 5 so that you can select which year of data you are viewing. Retain the ability to just select one age group for the sex distribution, and default to no age group selected.

Add a tooltip so you can see exactly how many people are in the age range for the top "Distribution of Ages for the Selected Year" histogram. 

Encode membership of the Baby Boomer generation with color using "#7D3C98" (purple) for the boomers "#F4D03F" (gold) for other.
"""

# your code here
boomer_scale = alt.Scale(domain=['Baby Boomer', 'Other'],
                         range=['#7D3C98', '#F4D03F'])

slider = alt.binding_range(min=1900, max=2000, step=10, name='Select Year:')
select_year = alt.selection_single(name="year", fields=['year'],
                                   bind=slider, init={'year': 1900})

select_age = alt.selection_single(name='age', fields=['age'], empty="all")

oughts = alt.Chart(df_population).mark_bar().encode(
    x=alt.X('age:O', title="Age"),
    y=alt.Y('people:Q', title="Number of People", scale=alt.Scale(domain=[0, 23000000])),
    color=alt.condition(select_age, 'Generation:N', alt.value('lightgray'), scale=boomer_scale),
    tooltip=['age:Q', 'people:Q']
).properties(
    title="Distribution of Ages in Selected Year",
    width=700
).add_selection(
    select_age
).add_selection(
    select_year
).transform_filter(
    select_year
)

hist = alt.Chart(df_population).mark_bar().encode(
    x=alt.X('people:Q', title="Number of People"),
    y=alt.Y('sex:N', title="Sex"),
    color=alt.Color('Generation:N', scale=boomer_scale )
).properties(
    title="Distribution of Sex for Above Age Selection (or Total for Year)",
    width=700
).transform_filter(
    select_age
).transform_filter(
    select_year
)

oughts & hist